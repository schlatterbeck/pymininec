Using yabasi
------------

- Yabasi can redirect input from a file with the -i option. The line
  endings are newlines, not carriage returns as in pcbasic
- The -L <lineno> option can be used to stop at lineno of the Basic
  program
- normal variables are in self.var [name], DIMed variables are in
  self.dim [name]
- Use the following code-snippet to dump impedance matrix, for the
  version-9 mininec you want to stop in line 340 (after giving the
  command 'interact' in the python debugger to get a python shell)::

    with open('matrix.b','w') as f:
      for y in range(1,76):
        for x in range(1,76):
          print ('%3d %3d: % .5e% .5ej'
              % (y-1,x-1,self.dim['ZR'][y,x],self.dim['ZI'][y,x]),file=f)



Using pcbasic
-------------

- Change to directory with basic script
- Use the conventional way without input redirection, instruct the basic
  interpreter to read from a file instead. Be sure to pre-convert the
  file so that all newlines are replaced with carriage-returns, e.g.
  tr '\n' '\r' < dipole-01.mini > dipole-01.CR
  python3 -m pdb =pcbasic mininec.scaled.bas --input=dipole-01.CR \
    --interface=none -d
  The basic interpreter can redirect the input. Unfortunately the script 
  explicitly uses SCRN output which is not redirectable with pcbasic.
- Set breakpoint:

  break /usr/lib/python3/dist-packages/pcbasic/basic/interpreter.py:105
  condition 1 struct.unpack_from('<H', token, 2)[0] == 259
  or e.g.
  condition 1 struct.unpack_from('<H', token, 2)[0] in (740, 744, 812)

  condition 1

  Print the current (Basic) line number whenever the breakpoint is hit:

   commands 1
   p struct.unpack_from('<H', token, 2)[0]
   end

- The current line number is
  p struct.unpack_from('<H', token, 2)[0]
- Printing scalar variables:
  p self._scalars
  prints something like
  b'MS!': b'!'[b'00000c87' 70.0]
  b'MW!': b'!'[b'00002085' 20.0]
  b'ML!': b'!'[b'00003084' 11.0]
  b'MA!': b'!'[b'00000084' 8.0]
  These *does* contain the correct values. Note that a '!' was appended
  to the file name even though the basic code used MS, MW, ...
  So it seems the default in Basic is to use single precision float

  Print an individual variable:
  p self._scalars.get (b'F3!').to_value()
  p self._scalars.get (b'X1!').to_value()
  p self._scalars.get (b'Y1!').to_value()
  p self._scalars.get (b'Z1!').to_value()
  p self._scalars.get (b'X2!').to_value()
  p self._scalars.get (b'Y2!').to_value()
  p self._scalars.get (b'Z2!').to_value()
  Show all variables:
  p sorted (self._scalars._vars.keys())

  Print arrays:
  Array memory usage:
  p self._memory.arrays.array_size_bytes (b'Q!')
  Dimension (created by 'DIM'):
  p self._memory.arrays.dimensions (b'Q!')
  Get the array as a python list
  p self._memory.arrays.to_list (b'Q!')
  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  p self._memory.arrays.to_list (b'J2%')
  [[0, 0], [0, 0], ...]]

  p self._memory.arrays.get(b'ZR!', [1,1]).to_value()
  p self._memory.arrays.get(b'ZI!', [1,1]).to_value()
  p self._memory.arrays.get(b'CG!', [1]).to_value()


# Debugging python program
break mininec.py:870
# In loop computing Z
break mininec.py:956

After first loop (k negative):
python: -24.251461047089546-0.04057961218741288j
basic:  -24.251426696777344-0.04057953506708145j

# Debug currently-unreached (in python) code
break /usr/lib/python3/dist-packages/pcbasic/basic/interpreter.py:105
commands 1
p struct.unpack_from('<H', token, 2)[0]
end
condition 1 struct.unpack_from('<H', token, 2)[0] in (33201, 33202, 10600)


condition 1 struct.unpack_from('<H', token, 2)[0] == 230 and self._scalars.get (b'J%').to_value() == 5
